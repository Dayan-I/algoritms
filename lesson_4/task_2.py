import cProfile
def simple_numbers(n):
    a = [0] * n  # создание массива с n количеством элементов
    for i in range(n):  # заполнение массива ...
        a[i] = i  # значениями от 0 до n-1

    # вторым элементом является единица, которую не считают простым числом
    # забиваем ее нулем.
    a[1] = 0

    m = 2  # замена на 0 начинается с 3-го элемента (первые два уже нули)
    while m < n:  # перебор всех элементов до заданного числа
        if a[m] != 0:  # если он не равен нулю, то
            j = m * 2  # увеличить в два раза (текущий элемент - простое число)
            while j < n:
                a[j] = 0  # заменить на 0
                j = j + m  # перейти в позицию на m больше
        m += 1

    # вывод простых чисел на экран (может быть реализован как угодно)
    b = []
    for i in a:
        if a[i] != 0:
            b.append(a[i])

cProfile.run('simple_numbers(100000)')#9596 function calls in 0.057 seconds

def simple_numbers_1(n):
    a = [0] * n  # создание массива с n количеством элементов
    for i in range(n):  # заполнение массива ...
        a[i] = i  # значениями от 0 до n-1
    a = a[2:]
    b = []
    for i in a:
        k = 0
        for m in range(2, i //2 +1):
            if i % m ==0:
                k+=1
        if k <=0:
            b.append(i)


cProfile.run('simple_numbers_1(100000)')# Разница очевидна, вложенные массивы сильно замедляют программу, 9596 function calls in 139.002 seconds
